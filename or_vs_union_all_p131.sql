-- SET search_path TO postgres_air;


-- SELECT
-- CASE
-- WHEN actual_departure>scheduled_departure + interval '1 hour' THEN 'Late
-- group 1'
-- ELSE 'Late group 2'
--  END AS grouping,
-- flight_id,
-- count(*) AS num_passengers
-- FROM boarding_pass bp
--  JOIN booking_leg bl USING (booking_leg_id)
--  JOIN booking b USING (booking_id)
--  JOIN flight f USING (flight_id)
-- WHERE departure_airport='FRA'
--  AND actual_departure>'2020-07-01' AND ( (
--  actual_departure>scheduled_departure + interval '30 minute'
--  AND actual_departure<=scheduled_departure + interval '1 hour'
-- )
-- OR
--  (actual_departure>scheduled_departure + interval '1 hour'
--  AND bp.update_ts >scheduled_departure + interval '30 minute')
-- )
-- GROUP BY 1,2; -- 2.7s

-- SELECT
--  'Late group 1' AS grouping,
--  flight_id,
--  count(*) AS num_passengers
--  FROM boarding_pass bp
--  JOIN booking_leg bl USING (booking_leg_id)
--  JOIN booking b USING (booking_id)
--  JOIN flight f USING (flight_id)
--  WHERE departure_airport='FRA' AND
--  actual_departure>scheduled_departure + interval '1 hour' AND
--  bp.update_ts > scheduled_departure + interval '30 minutes'
--  AND actual_departure>'2020-07-01'
-- GROUP BY 1,2
-- UNION ALL
-- SELECT
--  'Late group 2' AS grouping,
--  flight_id,
--  count(*) AS num_passengers
--  FROM boarding_pass bp
--  JOIN booking_leg bl USING(booking_leg_id)
--  JOIN booking b USING (booking_id)
--  JOIN flight f USING (flight_id)
--  WHERE departure_airport='FRA' AND
--  actual_departure>scheduled_departure + interval '30 minute'
--  AND actual_departure<=scheduled_departure + interval '1 hour'
--  AND actual_departure>'2020-07-01'
--  GROUP BY 1,2; -- 3.4s

-- 2nd query, as stated in the book, is little bit faster and more maintainable. In my case, its slower, and imho, lots of repetitive code what makes this approach of a lower quality from code quality view point.